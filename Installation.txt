zwhome Software Installation

- Write Raspian Jessie operating system image to SD card (See https://www.raspberrypi.org/documentation/installation/installing-images/README.md )
- Put SD card in Raspberry Pi, power it up, and configure it with raspi-config (See http://elinux.org/RPi_raspi-config )
- Update the system with the following commands
  - sudo apt-get update
  - sudo apt-get upgrade
- Install real time clock. There are many sources of instruction, such as https://cdn-learn.adafruit.com/downloads/pdf/adding-a-real-time-clock-to-raspberry-pi.pdf
- Install libraries
  - sudo apt-get install libudev-dev
  - sudo apt-get install libcurl4-openssl-dev
  - sudo apt-get install libhdate-dev
  - sudo apt-get install libtelnet-dev
- Build open-zwave library
  - Download a release of open-zwave (latest is version 1.5 as of this writing) from https://github.com/OpenZWave/open-zwave/releases
  - Decompress it into a directory
    - tar xvzf https://github.com/OpenZWave/open-zwave/archive/v1.5.tar.gz
  - Compile it
    - cd open-zwave-1.5
	- make
- Install Code::Blocks IDE
  - sudo apt-get install codeblocks
- Launch Code::Blocks
- Create new project
- Select console application
- The language of the console application is C++
- Choose Project title (e.g. zwhome)
- Choose folder to create project in (e.g. /home/pi/Documents/Codeblocks)
- Use defaults for compiler to use and configurations to enable
- Set project build options
  - compiler settings
    - defines
      linux
  - linker settings
    - link libraries
      /home/pi/Documents/open-zwave-1.5/libopenzwave.a
      pthread
      curl
      hdate
      udev
  - Search directories
    - compiler
      /home/pi/Documents/openzwave-1.5/cpp/src
      /home/pi/Documents/openzwave-1.5/cpp/src/platform
      /home/pi/Documents/openzwave-1.5/cpp/src/value_classes
      /home/pi/Documents/openzwave-1.5/cpp/tinyxml
    - linker
      /usr/lib/arm-linux-gnueabihf
- Import zwhome source code, located at https://github.com/obzerving/zwhome into codeblocks
- Edit zwDevices.cpp for path to open-zwave-1.5/config
- Download a zip file of the repository https://github.com/cesanta/mongoose
- Unzip the file and import only mongoose.c and mongoose.h
- Edit mongoose.h to modify the following compiler option (starting at line 3266 in the version I downloaded):

#ifndef MG_ENABLE_THREADS /* ifdef-ok */
#if defined(_WIN32) || defined(linux)
#define MG_ENABLE_THREADS 1
#else
#define MG_ENABLE_THREADS 0
#endif
#endif

- Compile and build zwhome
- Make a directory to put zwhome executable
  - mkdir /home/pi/zwhome
- Copy executable from /home/pi/Documents/Codeblocks/zwhome/bin/Debug to /home/pi/zwhome
  - cd /home/pi/zwhome
  - cp /home/pi/Documents/Codeblocks/zwhome/bin/Debug/zwhome .
- Use z-wave controller to add z-wave devices to z-wave network (see http://aeotec.com/z-wave-usb-stick/913-z-stick-manual-instructions.html )
- Run prequel. It will identify the z-wave devices in the network and ask you to provide a name and location for each one.
- Download sample zwhome configuration file, located at https://github.com/obzerving/zwhome/blob/master/configuration/zwconfig.txt into /home/pi/zwhome and modify it accordingly (Note: zwhome must be restarted everytime the configuration file is changed).
- Download sample zwhome rules file, located at https://github.com/obzerving/zwhome/blob/master/configuration/rulesfile.txt into /home/pi/zwhome and modify accordingly (Note: zwhome must be restarted everytime the rules file is changed).
  - You will reference devices in the rules file by the location and name you specified for them in prequel. for example, if you gave a device the name "crock-pot" and said its location was "kitchen", you would refer to it as kitchen.crock-pot.
- Run zwhome (This will execute the rules file automatically) and add the following line to /etc/rc.local to have it start after a reboot
  /home/pi/zwhome/zwhome /home/pi/zwhome/zwconfig.txt &
- Try the RESTful service! (for example, if your pi's IP address is 192.168.1.2 and you have a chandelier (named "light") in the dining room (named "dining-room") connected to a z-wave switch)
  - http://192.168.1.2:8000/devices/switches/kitchen.light?state=on
  - http://192.168.1.2:8000/devices/switches/kitchen.light?state=off

Amazon Echo Bridge Software Installation
- Follow the directions at https://github.com/bwssytems/ha-bridge , which is basically
  - mkdir habridge
  - cd habridge
  - wget https://github.com/bwssytems/ha-bridge/releases/download/v4.5.6/ha-bridge-4.5.6.jar
  - Include the System Control Setup on a pi per https://github.com/bwssytems/ha-bridge#manual-installation-of-ha-bridge-and-setup-of-systemd-service EXCEPT when creating ha-bridge.service, change the line
    Type=simple
	to
	Type=idle
  - ha-bridge should now be available at http://192.168.1.2:8080
  - Go to that web page and add all devices (for example)
NOTE: This is the minimum info needed to define the device. You can fill in other fields if desired.
  - Name: Kitchen Light
  - On items:
    - Type: HTTP Device
    - Target Item: http://192.168.1.2:8000/devices/kitchen.light?state=on
    - Http Verb: GET
    - Content Type: application/json
  - Off items:
    - Type: HTTP Device
    - Target Item: http://192.168.1.2:8000/devices/kitchen.light?state=off
    - Http Verb: GET
    - Content Type: application/json
NOTE: If the device is a dimmer switch, add this info to the device definition
  - Dim items:
    - Type: HTTP Device
    - Target Item: http://192.168.1.2:8000/devices/kitchen.light?state=on&level=${intensity.percent}
    - Http Verb: GET
    - Content Type: application/json
- Use Amazon Echo app to discover devices (or tell the Echo to "discover devices")
- Try it!
  - The Echo's wake word is "Alexa," so tell it "Alexa, turn on kitchen light"
  - If your switch is a dimmer, try "Alexa, turn on kitchen light to 40 percent"

zdot Software Installation
- Download the software, located at ?/zDot
- Compile it
  - g++ zDot.cpp mongoose.cpp -l telnet -l pthread -o zdot
- Add a device to the bridge using the configurator (see above;  Note that the zDot server's port is 8001; in this example, your pi's IP address is 192.168.1.2)
  - Name: speakers
  - On URL: http://192.168.1.2:8001/avr/audio/speakers?state=on
  - Off URL: http://192.168.1.2:8001/avr/audio/speakers?state=off
- Execute the following command and also add it to your .bashrc file so it executes on start up
  - pulseaudio --start
- Pair the Echo Dot with your pi. You might need to have the pi initiate the pairing through its desktop GUI.
- Run it (for example, your Pioneer VSX model receiver's IP address is 192.168.1.3 and it listens on port 8102) and add it to /etc/rc.local
  - /home/pi/zDot/zdot 192.168.1.3 8102 &
- Try it! (for example, your Amazon Echo Dot uses the wake word "Echo," so tell it "Echo, turn on the speakers")
  - Note: You should hear all subsequent sound from the Dot coming out of the receiver.
